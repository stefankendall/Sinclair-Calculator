import groovy.json.JsonSlurper
import groovyx.gpars.GParsPool

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'org.codehaus.gpars:gpars:1.0-beta-3'
    }
}

task copyImages(type: Copy) {
    from 'images'
    into 'build/images'
    include '*.*'
}

task copyHtmlFiles(type: Copy, dependsOn: [copyImages]) {
    from '.'
    into 'build'
    include '*.html'
    include 'js/**/*.png'
}

task copyAppIcon(type: Copy) {
    from 'distribution'
    into 'build'
    include 'icons/**/*.png'
}

task copySplashes(type: Copy) {
    from 'distribution'
    into 'build'
    include 'splashes/**/*.png'
}

def compress(String type, String baseDirectory) {
    def elementsToMinify = []
    fileTree(baseDirectory) {
        include "**/*.$type"
    }.visit { element ->
        if (element.file.isFile()) {
            elementsToMinify << element
        }
    }

    def ignoredFileNames = ['touch-charts.js', 'sencha-touch-all.js', 'date.js']

    GParsPool.withPool(4) {
        elementsToMinify.eachParallel { element ->
            def outputFileLocation = "build/$baseDirectory/${element.relativePath}"
            new File(outputFileLocation).parentFile.mkdirs()

            def inputFile = "$baseDirectory/${element.relativePath}"

            boolean closureIssueFiles = ignoredFileNames.any { element.relativePath.toString().contains(it) }
            if (closureIssueFiles) {
                minifyWithYui(inputFile, outputFileLocation)
            }
            else {
                minifyWithClosure(inputFile, outputFileLocation)
            }
        }
    }
}

def execute_process(command) {
    def proc = command.execute(null, new File(System.properties['user.dir']))
    proc.consumeProcessOutput(System.out, System.err)
    proc.waitFor()
}

def minifyWithClosure(String input, String output) {
    println "Minifying ${input}"
    execute_process "java -jar lib/compiler.jar --js ${input} --js_output_file ${output}"
}

def minifyWithYui(String input, String output) {
    println "Minifying ${input}"
    execute_process "java -jar lib/yuicompressor-2.4.7.jar ${input} -o ${output}"
}

task compressJs {
    inputs.dir new File('js')
    outputs.dir new File('build/js')

    doLast {
        compress('js', 'js')
    }
}

task copyWithoutCompress(type: Copy) {
    from '.'
    into 'build'
    include 'js/**/*.js'
}

def getJsFilesFrom(File htmlFile) {
    def htmlFileText = htmlFile.text
    def m = htmlFileText =~ /(?m)src=['"](.*?)['"]/
    return m.collect { new File('build', it[1]) }
}

def rewriteSingleJsInclude(File htmlFile, String jsFileToAdd) {
    println "Rewriting JS includes in ${htmlFile.path}"
    def htmlFileText = htmlFile.text
    String newHtml = htmlFileText.replaceAll(/(?m)(?s)<!--combine.*end combine-->/, '')
    def jsInclude = "<script type='text/javascript' src='${jsFileToAdd}'></script>"
    newHtml = newHtml.replaceAll('</head>', "${jsInclude}</head>")
    htmlFile.write(newHtml)
}

def copyAndCombineJs() {
    StringBuilder combinedJs = new StringBuilder()
    List<File> orderedJsFiles = getJsFilesFrom(new File('build/index.html'))
    orderedJsFiles.each { File f ->
        if (f.exists()) {
            combinedJs.append(f.text)
        }
        else {
            println "Warning: ${f.path} does not exist"
        }
    }

    println 'Combination complete. Deleting source files.'
    orderedJsFiles.each { File f -> f.delete() }

    println 'Creating app.js'
    new File('build/app.js').append(combinedJs)

    rewriteSingleJsInclude(new File('build/index.html'), 'app.js')
}

task copyJs(dependsOn: [compressJs]) << {
    copyAndCombineJs()
}

task copyJsDebug(dependsOn: [copyWithoutCompress]) << {
    copyAndCombineJs()
}

task copyCss(type: Copy) {
    from '.'
    into 'build'
    include 'css/**/*.css'
    include 'js/**/*.css'
}

task clean << {
    String gitBackupDirectory = 'build-backup-git'
    mkdir(gitBackupDirectory)
    copy {
        from 'build/.git'
        into gitBackupDirectory
    }
    delete('build')
    mkdir('build')
    mkdir('build/.git')

    copy {
        from gitBackupDirectory
        into 'build/.git'
    }

    delete gitBackupDirectory
}

task copySoundFiles() << {
    copy {
        from './sounds'
        into './build/sounds'
        include '*.*'
    }
}

task build(dependsOn: [copyHtmlFiles, copyAppIcon, copySplashes, copyJs, copyCss, copySoundFiles]) << {}
task buildDebug(dependsOn: [copyHtmlFiles, copyAppIcon, copySplashes, copyJsDebug, copyCss, copySoundFiles]) << {}

task incrementJsVersion << {
    File versionFile = new File('js/version.js')
    String oldVersionCallback = versionFile.text
    def versionPattern = /version=(\d+);/
    def matcher = (oldVersionCallback =~ versionPattern)
    long version = matcher[0][1] as long
    version++;
    String newVersionCallback = oldVersionCallback.replaceAll(versionPattern, 'version=' + version + ';')

    versionFile.withWriter { w ->
        w.write(newVersionCallback);
    }
}

task incrementAndroidVersion << {
    File configFile = new File('native/android/AndroidManifest.xml')
    String oldConfig = configFile.text

    def versionPattern = /android:versionName="(\d+)"/
    long newVersion = ((oldConfig =~ versionPattern)[0][1] as long) + 1

    def versionCodePattern = /android:versionCode="(\d+)"/
    long newVersionCode = ((oldConfig =~ versionCodePattern)[0][1] as long) + 1

    String newConfig = oldConfig.replaceAll(versionPattern,
            'android:versionName="' + newVersion + '"').replaceAll(versionCodePattern, 'android:versionCode="' + newVersionCode + '"')

    configFile.withWriter { w ->
        w.write(newConfig);
    }
}

task incrementIosVersion << {
    List<File> appPlists = [
            new File('native/ios/Wendler531/Big Lifts-Info.plist'),
            new File('native/ios/Wendler531/WendlerPro-Info.plist')
    ]
    appPlists.each { File appPlist ->
        String oldPlist = appPlist.text

        def shortVersionPattern = /(?ms)<key>CFBundleShortVersionString<\\/key>.*?<string>(.*?)<\\/string>/
        long newShortVersion = ((oldPlist =~ shortVersionPattern)[0][1] as long) + 1

        def longVersionPattern = /(?ms)<key>CFBundleVersion<\\/key>.*?<string>(.*?)<\\/string>/
        long newLongVersion = ((oldPlist =~ longVersionPattern)[0][1] as long) + 1

        String newPlist = oldPlist.replaceAll(shortVersionPattern, "<key>CFBundleShortVersionString</key>\n\t<string>${newShortVersion}</string>")
                .replaceAll(longVersionPattern, "<key>CFBundleVersion</key>\n\t<string>${newLongVersion}</string>")

        appPlist.withWriter { w ->
            w.write(newPlist)
        }
    }
}

task version(dependsOn: [incrementJsVersion, incrementAndroidVersion, incrementIosVersion]) << {}

def execAndGetResult(def command) {
    def output = new ByteArrayOutputStream()
    println "Executing ${command}"
    exec {
        commandLine = command
        standardOutput = output
    }
    return new JsonSlurper().parseText(output.toString())
}

final List ANDROID_DRAWABLE_LOCATIONS = ['native/android/res/drawable', 'native/android/res/drawable-hdpi', 'native/android/res/drawable-ldpi'
        , 'native/android/res/drawable-mdpi', 'native/android/res/drawable-xhdpi']

task setupAndroidAppIcons() << {
    for (String location : ANDROID_DRAWABLE_LOCATIONS) {
        copy {
            from 'distribution/icons'
            include 'icon114.png'
            into location
            rename { filename ->
                'icon.png'
            }
        }
    }
}

task setupAndroidSplashScreens() << {
    for (String location : ANDROID_DRAWABLE_LOCATIONS) {
        copy {
            from 'distribution/splashes'
            include 'splash480x800.png'
            into location
            rename { filename ->
                'splash.png'
            }
        }
    }
}

task setupAndroidAppFiles() << {
    copy {
        from 'build'
        exclude '.git'
        into 'native/android/assets/www'
    }
}

task setupAndroidPhonegapFiles() << {
    copy {
        from 'native/android'
        include 'cordova-*.js'
        into 'native/android/assets/www'
        rename { filename ->
            "phonegap.js"
        }
    }
}

task cleanAndroidAssets() << {
    delete('./native/android/assets')
    ANDROID_DRAWABLE_LOCATIONS.each {
        delete(it)
    }
}

task setupAndroidAssets(dependsOn: [setupAndroidAppIcons, setupAndroidSplashScreens, setupAndroidAppFiles, setupAndroidPhonegapFiles]) << {
}

task buildNativeAndroidRelease(dependsOn: [cleanAndroidAssets, setupAndroidAssets]) << {
    exec {
        commandLine = ['ant', 'clean', 'release']
        workingDir = new File('./native/android')
    }
}

task cleanIosAssets() << {
    delete('./native/ios/www')
    mkdir('./native/ios/www')
}

task setupIosAppFiles() << {
    copy {
        from 'build'
        exclude '.git'
        into 'native/ios/www'
    }
}
task setupIosPhonegap() << {
    copy {
        from 'native/ios'
        include 'cordova-*.js'
        into 'native/ios/www'
        rename { filename ->
            "phonegap.js"
        }
    }
}

task setupIosIcons() << {
    List icons = [
            'icon144.png',
            'icon114.png',
            'icon72.png',
            'icon57.png'
    ]
    for (String icon : icons) {
        copy {
            from 'distribution/icons'
            include icons
            into 'native/ios/'
        }
    }
}

task setupIosSplashScreen() << {
    copy {
        from 'distribution'
        into 'build'
        include 'splashes/**/*.png'
    }
}

task setupIosAssets(dependsOn: [setupIosIcons, setupIosSplashScreen, setupIosPhonegap, setupIosAppFiles]) << {}

task prepareIos(dependsOn: [cleanIosAssets, setupIosAssets]) << {}

task copyToDropbox() << {
    copy {
        from 'native/android/bin'
        into '/Users/stefankendall/Dropbox/public/Wendler531/LATEST'
        include '*-release.apk'
    }
}